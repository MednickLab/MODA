'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _resizer = require('./resizer');

var _resizer2 = _interopRequireDefault(_resizer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var clamp = function clamp(n, min, max) {
  return Math.max(Math.min(n, max), min);
};

var Risizable = function (_Component) {
  _inherits(Risizable, _Component);

  function Risizable(props) {
    _classCallCheck(this, Risizable);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Risizable).call(this, props));

    var width = props.width;
    var height = props.height;

    _this.state = {
      isActive: false,
      width: width,
      height: height
    };

    _this.onTouchMove = _this.onTouchMove.bind(_this);
    _this.onMouseMove = _this.onMouseMove.bind(_this);
    _this.onMouseUp = _this.onMouseUp.bind(_this);

    window.addEventListener('mouseup', _this.onMouseUp);
    window.addEventListener('mousemove', _this.onMouseMove);
    window.addEventListener('touchmove', _this.onTouchMove);
    window.addEventListener('touchend', _this.onMouseUp);
    return _this;
  }

  _createClass(Risizable, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var size = this.getBoxSize();
      this.setSize(size);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var width = _ref.width;
      var height = _ref.height;

      if (width !== this.props.width) this.setState({ width: width });
      if (height !== this.props.height) this.setState({ height: height });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('mouseup', this.onMouseUp);
      window.removeEventListener('mousemove', this.onMouseMove);
      window.removeEventListener('touchmove', this.onTouchMove);
      window.removeEventListener('touchend', this.onMouseUp);
    }
  }, {
    key: 'onTouchMove',
    value: function onTouchMove(event) {
      this.onMouseMove(event.touches[0]);
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove(_ref2) {
      var clientX = _ref2.clientX;
      var clientY = _ref2.clientY;
      var _state = this.state;
      var direction = _state.direction;
      var original = _state.original;
      var isActive = _state.isActive;
      var _props = this.props;
      var minWidth = _props.minWidth;
      var maxWidth = _props.maxWidth;
      var minHeight = _props.minHeight;
      var maxHeight = _props.maxHeight;

      var newWidth = void 0;
      var newHeight = void 0;
      if (!isActive) return;
      if (direction.indexOf('x') !== -1) {
        newWidth = original.width + clientX - original.x;
        var min = minWidth < 0 || typeof minWidth === 'undefined' ? 0 : minWidth;
        var max = maxWidth < 0 || typeof maxWidth === 'undefined' ? newWidth : maxWidth;
        newWidth = clamp(newWidth, min, max);
        this.setState({ width: newWidth });
      }
      if (direction.indexOf('y') !== -1) {
        newHeight = original.height + clientY - original.y;
        var _min = minHeight < 0 || typeof minHeight === 'undefined' ? 0 : minHeight;
        var _max = maxHeight < 0 || typeof maxHeight === 'undefined' ? newHeight : maxHeight;
        newHeight = clamp(newHeight, _min, _max);
        this.setState({ height: newHeight });
      }
      var resizable = this.refs.resizable;
      this.props.onResize(direction, {
        width: newWidth || this.state.width,
        height: newHeight || this.state.height
      }, {
        width: resizable.clientWidth,
        height: resizable.clientHeight
      });
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp() {
      var _state2 = this.state;
      var width = _state2.width;
      var height = _state2.height;
      var isActive = _state2.isActive;
      var direction = _state2.direction;

      if (!isActive) return;
      var resizable = this.refs.resizable;
      this.props.onResizeStop(direction, {
        width: width,
        height: height
      }, {
        width: resizable.clientWidth,
        height: resizable.clientHeight
      });
      this.setState({ isActive: false });
    }
  }, {
    key: 'onResizeStart',
    value: function onResizeStart(direction, e) {
      this.props.onResizeStart(direction, e);
      var size = this.getBoxSize();
      this.setState({
        original: {
          x: e.clientX,
          y: e.clientY,
          width: size.width,
          height: size.height
        },
        isActive: true,
        direction: direction
      });
    }
  }, {
    key: 'getBoxSize',
    value: function getBoxSize() {
      if (typeof window.getComputedStyle === 'undefined') {
        throw new Error('This browser not support window.getComputedStyle');
      }
      var style = window.getComputedStyle(this.refs.resizable, null);
      var width = ~ ~style.getPropertyValue('width').replace('px', '');
      var height = ~ ~style.getPropertyValue('height').replace('px', '');
      return { width: width, height: height };
    }
  }, {
    key: 'setSize',
    value: function setSize(size) {
      this.setState({
        width: this.state.width || size.width,
        height: this.state.height || size.height
      });
    }
  }, {
    key: 'getBoxStyle',
    value: function getBoxStyle() {
      var _this2 = this;

      var getSize = function getSize(key) {
        if (typeof _this2.state[key] === 'undefined') return 'auto';else if (/px$/.test(_this2.state[key].toString())) return _this2.state[key];else if (/%$/.test(_this2.state[key].toString())) return _this2.state[key];
        return _this2.state[key] + 'px';
      };
      return {
        width: getSize('width'),
        height: getSize('height')
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var style = this.getBoxStyle();
      var _props2 = this.props;
      var isResizable = _props2.isResizable;
      var onClick = _props2.onClick;
      var customStyle = _props2.customStyle;
      var handleStyle = _props2.handleStyle;
      var customClass = _props2.customClass;
      var onMouseDown = _props2.onMouseDown;
      var onDoubleClick = _props2.onDoubleClick;
      var onTouchStart = _props2.onTouchStart;

      var onResizeStartX = this.onResizeStart.bind(this, 'x');
      var onResizeStartY = this.onResizeStart.bind(this, 'y');
      var onResizeStartXY = this.onResizeStart.bind(this, 'xy');
      return _react2.default.createElement(
        'div',
        {
          ref: 'resizable',
          style: Object.assign({ position: 'relative' }, customStyle, style),
          className: customClass,
          onClick: onClick,
          onMouseDown: onMouseDown,
          onDoubleClick: onDoubleClick,
          onTouchStart: onTouchStart
        },
        this.props.children,
        isResizable.x !== false ? _react2.default.createElement(_resizer2.default, { type: 'x', onResizeStart: onResizeStartX, replaceStyles: handleStyle.x }) : null,
        isResizable.y !== false ? _react2.default.createElement(_resizer2.default, { type: 'y', onResizeStart: onResizeStartY, replaceStyles: handleStyle.y }) : null,
        isResizable.xy !== false ? _react2.default.createElement(_resizer2.default, { type: 'xy', onResizeStart: onResizeStartXY, replaceStyles: handleStyle.xy }) : null
      );
    }
  }]);

  return Risizable;
}(_react.Component);

Risizable.propTypes = {
  children: _react.PropTypes.any,
  onClick: _react.PropTypes.func,
  onDoubleClick: _react.PropTypes.func,
  onMouseDown: _react.PropTypes.func,
  onResizeStop: _react.PropTypes.func,
  onResizeStart: _react.PropTypes.func,
  onTouchStart: _react.PropTypes.func,
  onResize: _react.PropTypes.func,
  customStyle: _react.PropTypes.object,
  handleStyle: _react.PropTypes.shape({
    x: _react.PropTypes.object,
    y: _react.PropTypes.object,
    xy: _react.PropTypes.object
  }),
  isResizable: _react.PropTypes.shape({
    x: _react.PropTypes.bool,
    y: _react.PropTypes.bool,
    xy: _react.PropTypes.bool
  }),
  customClass: _react.PropTypes.string,
  width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
  height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
  minWidth: _react.PropTypes.number,
  minHeight: _react.PropTypes.number,
  maxWidth: _react.PropTypes.number,
  maxHeight: _react.PropTypes.number
};
Risizable.defaultProps = {
  onResizeStart: function onResizeStart() {
    return null;
  },
  onResize: function onResize() {
    return null;
  },
  onResizeStop: function onResizeStop() {
    return null;
  },
  isResizable: { x: true, y: true, xy: true },
  customStyle: {},
  handleStyle: {}
};
exports.default = Risizable;